<style>
  .btn-result {
    color: #fff; 
    background-color: #4d62a7; 
    border-color: #4d62a7;
}
.btn-result:hover, .btn-result:focus, .btn-result:active, .btn-result.active, .open>.dropdown-toggle.btn-result {
    color: #fff;
    background-color: #3e4c77;
    border-color: #1a2d3d; /*set the color you want here*/
}
.ct-label {
  font-size: 10px;
  font-weight: bold;
}

.flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}
</style>
<div class="block-header">
  <div class="row">
    <div class="col-lg-5 col-md-8 col-sm-12">
      <h2>Chart</h2>
    </div>
    <div class="col-lg-7 col-md-4 col-sm-12 text-right">
      <ul class="breadcrumb justify-content-end">
        <li class="breadcrumb-item"><a href="index.html"><i class="icon-home"></i></a></li>
        <li class="breadcrumb-item">Result</li>
        <li class="breadcrumb-item active">Chart</li>
      </ul>
    </div>
  </div>
</div>
<div class="row clearfix m-b-20">
  <div class="col-lg-3 col-md-6">
    <div class="btn-group" style="width: 100%;">
      <select class="btn btn-secondary" style="width: 100%;text-align:centre;" onchange="regionSelection(event)">
        <option class="dropdown-menu dropdown-item" style="background-color:white; text-align:centre;" selected>Select Region</option>
        {{#each regions}}
        <option class="dropdown-menu dropdown-item" style="background-color:white; text-align:centre;" value="{{id}},{{name}}">{{name}}</option>
        {{/each}}
      </select>
    </div>
  </div>
</div>
<div class="row m-b-20" id="graphContainer">
  <div class="col-md-12">
    <div class="card">
      <div class="body">
        <div id="cardSurvey" class="row" style="display: hide;">
          <div style="margin-bottom:10px;">
            <div class="body text-center">
              <h2 id="title" class="font700"></h2>
              <h2 id="jumlahSurvey"></h2>
              <span id="namaRegion"></span>
            </div>
          </div>
        </div>
        <br/>
        <div class="row m-b-20">
          <div class="col-md-12">
            <div class="flex-center">
              <div id="survey-chart" class="status-survey"></div> <!-- Status call percentage -->
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-md-12">
            <div class="flex-center">
              <div id="comment-chart" class="status-comment"></div> <!-- Status call percentage -->
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-md-12">
            <div class="flex-center">
              <div id="phone-chart" class="status-phone"></div> <!-- Status call percentage -->
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-md-12">
            <div class="flex-center">
              <div id="race-chart" class="status-race"></div> <!-- Status call percentage -->
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-md-12">
            <div class="flex-center">
              <div id="questionDist-chart" class="status-questionDist-chart"></div>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-md-12">
            <div class="flex-center">
              <div id="question-chart" class="status-question"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<div id="bottomCard" class="row">
  <div class="col-sm-12">
    <div class="card" style="padding:15px; text-align:center;">
      <button class="btn btn-result" onclick="viewDetails()">View Details</button>
      <a class="btn" style="border-color: #4d62a7; background: white;" id="csv">CSV</a>
    </div>
  </div>
</div>

<script>
  $("#bottomCard").hide()
  async function regionSelection(e) {
    var arr = e.target.value.split(',');
    const regionName = arr[1];
    sessionStorage.setItem("region_id", arr[0])
    const region_id = arr[0];
      const res = await fetch(`{{url}}surveys/statistics/${region_id}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `bearer ${sessionStorage.getItem("token")}`,
          'Cache-Control': 'no-cache'
        }
      });
      var regionRecord = await res.json()
      
      if(regionRecord) {
        displaySasaran(regionRecord, regionName);
        surveyChart(regionRecord);
        commentChart(regionRecord);
        phoneChart(regionRecord);
        raceChart(regionRecord);
        questionChart(regionRecord);
        questionDist(regionRecord);

      //Setting CSV file content
      var obj = ["id","gender","phone","race","name","address","location","region_id","region_name","question_survey","comment","status","status_phone","status_survey","call_duration","operator_id"]

      regionRecord.forEach(e => {
        e.address = e.address.replace(/,/g, '');
        if (e.status_phone){
          if (e.status_phone.indexOf(',') != -1) { 
            e.status_phone = e.status_phone.replace(/,/g, '') 
          }
        }
        if (e.comment){
          if (e.comment.indexOf(',') != -1) { 
            e.comment = e.comment.replace(/,/g, '') 
          }
        }
        if (e.phone.indexOf(',') != -1) { 
          e.phone = e.phone.replace(/,/g, '') 
        }
        if(e.question_survey) {
          if (e.question_survey.indexOf(',') != -1) {
            e.question_survey = e.question_survey.replace(/,/g, '') 
          }
        }
      })
      regionRecord.unshift(obj);
      const jsonObject = JSON.stringify(regionRecord)
      const csvContent = ConvertToCSV(jsonObject)
      //Appending CSV download link to the button
      if(csvContent) {
        var encodedUri = encodeURI(csvContent);
        var link = document.getElementById("csv");
        link.setAttribute("href", 'data:text/csv;charset=UTF-8,' + encodedUri);
        link.setAttribute("download", "surveyDetails.csv");
      }
      }
    $('#graphContainer').fadeIn(1000)
    $("#bottomCard").show()
  } 

  function ConvertToCSV(objArray) {
    var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
    var str = '';

    for (var i = 0; i < array.length; i++) {
        var line = '';
        for (var index in array[i]) {
            if (line != '') line += ','

            line += array[i][index];
        }

        str += line + '\r\n';
    }

    return str;
  }

  function surveyChart(surveyRecord) {
    $(".status-survey").empty()
    var done = 0;
    var undone = 0;
    var survey = surveyRecord.map(e => e.status)
    survey.forEach(e => {
      if(e == 0){
        done=+1;
      } else if( e == 2){
        undone=+1;
      }
    })

    var data = {
      labels: ['Passed Surveys', 'Pending Surveys'],
      series: [{name: 'Passed Surveys', value: done}, {name: 'Pending Surveys', value: undone}]
    };

    const options = {
      labelInterpolationFnc: value => interpolation(value, data.series),
      chartPadding: 20,
      labelOffset: 20,
      labelDirection: 'explode',
      width: '350px',
      height: '250px'
    }

    var sum = function(a, b) { return a + b };

    new Chartist.Pie('.status-survey', data, options);

    $(".status-survey").append('<label for="survey-chart" class="col-form-label" style="display: block; text-align:center;">Survey Status</label>')
  }

  function commentChart(commentRecord) {
    $(".status-comment").empty()
    var info = 0
    var wr = 0
    var dll = 0
    var comment = commentRecord.map(e => e.comment)
    comment.forEach(e => {
      if (e != null) {
        if (e != 'null'){
          var temp = JSON.parse(e).shift();
          if (temp == "Info"){
            info=+1
          } else if (temp == "Wakil Rakyat") {
            wr=+1
          } else if (temp == "Lain-Lain") {
            dll=+1
          }
        } else {
          info = 1;
        }
      }
    })

    var data = {
      labels: ['Info', 'Wakil Rakyat', 'dll'],
      series: [{name: 'Info', value: info}, {name: 'Wakil Rakyat', value: wr}, {name: 'dll', value: dll}]
    }

    const options = {
      labelInterpolationFnc: value => interpolation(value, data.series),
      chartPadding: 20,
      labelOffset: 20,
      labelDirection: 'explode',
      width: '350px',
      height: '250px'
    }

    new Chartist.Pie('.status-comment', data, options)

    $(".status-comment").append('<label for="comment-chart" class="col-form-label" style="display: block; text-align:center;">Comment Record</label>')
  }

  function phoneChart(phoneRecord) {
    $(".status-phone").empty()

    var sn = 0    //salah nombor
    var tw = 0    //tidak wujud
    var hk = 0    //hubungi kemudian
    var tm = 0    //tidak berminat

    var phone = phoneRecord.map(e => e.status_phone)

    phone.forEach(e => {
      if (e != null) {
        if (e != 'null'){
          var len = JSON.parse(e).length
          var temp = JSON.parse(e)
          for(i=0;i<len;i++){
            if (temp[i] == "Salah No"){
              sn=+1
            } else if (temp[i] == "Tak Wujud") {
              tw=+1
            } else if (temp[i] == "Hubungi Kemudian") {
              hk=+1
            } else if (temp[i] == "Tak Minat") {
              tm=+1
            }
          }
        } else {
          sn = 1;

        }
      }
    })

    var data = {
      labels: ['Salah Nombor', 'Tidak Wujud', 'Hubungi Kemudian', "Tak Berminat"],
      series: [{name: 'Salah Nombor', value: sn}, {name: 'Tidak Wujud', value: tw}, {name:'Hubungi Kemudian', value: hk}, {name: 'Tak Berminat', value: tm}]
    }

    const options = {
      labelInterpolationFnc: value => interpolation(value, data.series),
      chartPadding: 20,
      labelOffset: 20,
      labelDirection: 'explode',
      width: '350px',
      height: '250px'
    }

    new Chartist.Pie('.status-phone', data, options)

    $(".status-phone").append('<label for="phone-chart" class="col-form-label" style="display: block; text-align:center;">Phone Record</label>')
  }

  function raceChart(regionRecord) {
    $(".status-race").empty()
    const raceData = regionRecord.reduce((acc, survey) => {
    const label = survey.race
    const searchedSurveyIndex = acc.series.findIndex(accSurvey => accSurvey.name === label)
      
    if (searchedSurveyIndex === -1)
      return {
        ...acc,
        labels: [
          ...acc.labels, 
          label
        ],
        series: [ 
          ...acc.series,
          {
            name: label, 
            value: 1
          }
        ]
      }
      
    acc.series[searchedSurveyIndex].value += 1
    return acc
    }, {labels: [], series: []})

    const options = {
      labelInterpolationFnc: value => interpolation(value, raceData.series),
      chartPadding: 20,
      labelOffset: 20,
      labelDirection: 'explode',
      width: '350px',
      height: '250px'
    }

    new Chartist.Pie(
      '#race-chart', 
      raceData, 
      options
    )
        $(".status-race").append('<label for="survey-chart" class="col-form-label" style="display: block; text-align:center;">Race Distribution</label>')
  }

  function questionChart(questionRecord) {
    $(".status-question").empty()
    var status_survey = 0
    var res1 = questionRecord.filter(e => status_survey == e.status)
    if(res1.length){
      var resp = res1.map(e => e.question_survey)
      var noofQuestion = JSON.parse(resp[0]).length
      var naming = []
      var data_set = []
      for(i=0;i<noofQuestion;i++){
        naming.push(`Soalan ${i+1}`)
      }
      
      const newResp = resp.map(a => JSON.parse(a))
      var soalan4 = null;
      var soalan5 = null;
      var soalan6 = null;

      const soalan1 = newResp.map(([first]) => first)
      const soalan2 = newResp.map(([_,second]) => second)
      const soalan3 = newResp.map(([_,s,third]) => third)
      if(noofQuestion>3){
        soalan4 = newResp.map(([_,s,t,forth]) => forth)
        if(noofQuestion>4){
          soalan5 = newResp.map(([_,s,t,f,fifth]) => fifth)
          if(noofQuestion>5){
            soalan6 = newResp.map(([_,s,t,f,fi,sixth]) => sixth)
          }
        }
      }

      var pokemon = [soalan1,soalan2,soalan3,soalan4,soalan5,soalan6]

      pokemon.forEach(e => {
        if(e!=null) {
          if(e!='null') {
            var size = e.length
            var ya = 0
            var tak = 0 
            var tp = 0
            for(i=0;i<size;i++){
              if(e[i]=="Ya"){
                ya=ya+1
              } else if (e[i]=="Tidak") {
                tak=tak+1
              } else if (e[i]=="Tidak Pasti"){
                tp=tp+1
              }
            }
            data_set.push([ya,tak,tp])
          }
        }
      })

      new Chartist.Bar('.status-question', {
        labels: naming,
        series: data_set
      }, {
        // Default mobile configuration
        stackBars: true,
        axisX: {
          labelInterpolationFnc: function(value) {
            return value.split(/\s+/).map(function(word) {
              return word[0];
            }).join('');
          }
        },
        axisY: {
          offset: 20
        }
      }, [
        // Options override for media > 400px
        ['screen and (min-width: 400px)', {
          reverseData: true,
          horizontalBars: true,
          axisX: {
            labelInterpolationFnc: Chartist.noop
          },
          axisY: {
            offset: 60
          }
        }],
        // Options override for media > 800px
        ['screen and (min-width: 800px)', {
          stackBars: false,
          seriesBarDistance: 10
        }],
        // Options override for media > 1000px
        ['screen and (min-width: 1000px)', {
          reverseData: false,
          horizontalBars: false,
          seriesBarDistance: 15
        }]
      ]);

      $(".status-question").append('<label for="survey-question" class="col-form-label" style="display: block; text-align:center;">Question Set</label>')
    }
  }

  function displaySasaran(sets, name) {
    var size = Object.keys(sets).length;
    document.getElementById("jumlahSurvey").innerHTML = size;
    document.getElementById("cardSurvey").style.display = "block";
    document.getElementById("namaRegion").innerHTML = name;
    document.getElementById("title").innerHTML = "<b><u>Jumlah Sasaran</u></b>"
  }

  async function questionDist(surveys) {
    $('.status-questionDist-chart').empty()

    const questionDistData = await questionDistributionData(surveys, '{{url}}')

    const labels = Object.keys(questionDistData)
    const graphQuestData = labels.reduce((acc, key) => {
      return {
        ...acc, 
        series: [
          ...acc.series, 
          {
            name: key, 
            value: questionDistData[key]
          }
        ],
        labels: [
          ...acc.labels,
          key
        ]
      }
    }, {
      series: [],
      labels: []
    })

    const options = {
      labelInterpolationFnc: value => interpolation(value, graphQuestData.series),
      chartPadding: 20,
      labelOffset: 20,
      labelDirection: 'explode',
      width: '350px',
      height: '250px'
    }

    new Chartist.Pie(
      '#questionDist-chart', 
      graphQuestData, 
      options
    )


    $(".status-questionDist-chart").append('<label class="col-form-label" style="display: block; text-align:center;">Question Group Distribution</label>')
  }

  function interpolation(value, data) {
    const survey = data.find(accSurvey => {
      return accSurvey.name === value
    })

    const amount = survey.value
    const total = data.reduce((acc, a) => acc + a.value, 0)
    if (total===0 || amount===0) return ''
    return value + ' ' + Math.round(amount / total * 100) + '%, ' + amount
  }


  function viewDetails() {
    window.location.href = "index.html#survey-record";
  }
</script>
