<div class="block-header">
  <div class="row">
    <div class="col-lg-5 col-md-8 col-sm-12">
      <h2>Operator</h2>
    </div>
    <div class="col-lg-7 col-md-4 col-sm-12 text-right">
      <ul class="breadcrumb justify-content-end">
        <li class="breadcrumb-item"><a href="index.html"><i class="icon-home"></i></a></li>
        <li class="breadcrumb-item">Tetapan</li>
        <li class="breadcrumb-item active">Operator</li>
      </ul>
    </div>
  </div>
</div>
<div class="row clearfix">
  <div class="col-lg-12">
    <div class="card">
      <div class="header">
        <h2>List of Operators</h2>
      </div>
      <div class="body">
        <button id="add" onclick="add()" class="btn btn-primary m-b-15" type="button">
          <i class="icon wb-plus" aria-hidden="true"></i> New Operator
        </button>
        <div class="table-responsive">
          <table class="table table-bordered table-hover table-striped datatable" id="addrowExample">
            <thead>
              <tr>
                <th>Full Name</th>
                <th>Username</th>
                <th>Age</th>
                <th>Gender</th>
                <th>Race</th>
                <th>Laptop ID</th>
                <th>Region</th>
                <th>Set Name</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {{#each oper}}
                <tr class="gradeA">
                  <td>{{fullname}}</td>
                  <td>{{username}}</td>
                  <td>{{age}}</td>
                  <td>{{gender}}</td>
                  <td>{{race}}</td>
                  <td>{{laptop_id}}</td>
                  <td>
                    {{printRegion oper=oper regions=regions }}
                  </td>                  
                  <td>{{set_id}}</td>
                  <td class="actions">
                    <button class="btn btn-sm btn-icon btn-pure btn-default on-default m-r-5 button-edit"
                      data-toggle="tooltip" data-original-title="Edit" onclick="edit('{{{username}}}')"><i
                        class="icon-pencil" aria-hidden="true"></i></button>
                    <button id="delete" class="btn btn-sm btn-icon btn-pure btn-default on-default button-remove"
                      data-toggle="tooltip" data-original-title="Remove" onclick="del('{{{username}}}')"><i
                        class="icon-trash" aria-hidden="true"></i></button>
                  </td>
                </tr>
              {{/each}}
            </tbody>
            <tfoot>
              <tr>
                <th>Full Name</th>
                <th>Username</th>
                <th>Age</th>
                <th>Gender</th>
                <th>Race</th>
                <th>Laptop ID</th>
                <th>Region</th>
                <th>Set Name</th>
                <th>Actions</th>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>
<script>

  sessionStorage.getItem("role") === "supervisor" ? $("#add, #delete").hide() : $("#add, #delete").show();
  $(document).ready(() => {
    $("table.datatable").dataTable();
  })


  async function add() {

    try {
      var operator = {{{json oper}}}
      var used_id = operator.map(res => res.laptop_id);
      var laptopId = ["L001","L002","L003","L004","L005","L006","L007","L008","L009","L010","L011","L012","L013","L014","L015","L016","L017","L018","L019","L020"];
      const id = laptopId.filter(id => used_id != id);
      var available_id = '<select class="form-control" id="laptopId">';
      id.forEach(id => {
        let option = '<option value="' + id + '">' + id + '</option>';
        available_id = available_id + option;
      })
      available_id = available_id + '</select><br/>';
      const { value } = await Swal.fire({
        title: 'Add new operator',
        html: '<br/><input type="text" class="form-control" id="fullname" placeholder="Enter full name"><br/>' + '<input type="text" class="form-control" id="username" placeholder="Enter username"><br/>' + '<input type="password" class="form-control" id="password" placeholder="Enter password"><br/>' + '<input type="age" class="form-control" id="age" placeholder="Enter age"><br/>' + '<select class="form-control" id="gender">' + '<option selected value="" disabled>Select gender</option>' + '<option value="Male">Male</option>' + '<option value="Female">Female</option></select><br/>' + '<select class="form-control" id="race">' + '<option selected value="" disabled>Select race</option>' + '<option value="Melayu">Melayu</option>' + '<option value="Cina">Cina</option>' + '<option value="Penan">Penan</option>' + '<option value="Iban">Iban/Sea Dayak</option>' + '<option value="Bumiputra">Bumiputra Sarawak</option></select><br/>' + '<input type="text" class="form-control" id="region" placeholder="Enter region"><br/>' + available_id + '<input type="text" class="form-control" id="role" value="operator" readonly>',
        focusConfirm: false,
        preConfirm: () => {
          return [
            document.getElementById('fullname').value,
            document.getElementById('username').value,
            document.getElementById('race').value,
            document.getElementById('age').value,
            document.getElementById('role').value,
            document.getElementById('laptopId').value,
            document.getElementById('gender').value,
            document.getElementById('password').value,
            document.getElementById('region').value
          ]
        }
      })

      if (value) {
        try {
          var formData = JSON.stringify({
            fullname: value[0],
            username: value[1],
            race: value[2],
            age: value[3],
            role: value[4],
            laptop_id: value[5],
            gender: value[6],
            password: value[7],
            region: value[8]
          });
          const accountCreate = await fetch(`${{{url}}}registration`, {
            method: "post",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json"
            },
            body: formData
          });

          const created = await accountCreate.json();

          if (created.insertstatus) {
            Swal.fire({
              title: "Congratulation",
              text: "Successfully Created",
              type: "success"
            }).then(result => {
              if (result.value) {
                window.location.reload();
              }
            });
          } else {
            Swal.fire({
              title: "Fail",
              text: "Please refill the registration form",
              type: "error"
            });
          }
        } catch (err) {
          Swal.fire("Something went wrong", err.message, "error");
        }
      }
    } catch (err) {
      console.log(err);
    }

  }


  async function edit(username) {

    var operator = {{{json oper}}}

    const nameList = operator.filter(profiles => username === profiles.username);
    var used_id = operator.map(res => res.laptop_id);
    var laptopId = ["L001","L002","L003","L004","L005","L006","L007","L008","L009","L010","L011","L012","L013","L014","L015","L016","L017","L018","L019","L020"];
    const id = laptopId.filter(id => used_id != id); //filter id yang belum guna
    var available_id = '<select class="form-control" id="laptopId">';
    var selected = '<option value="' + nameList[0].laptop_id + '" selected>' + nameList[0].laptop_id + '</option>'; // selected laptop id
    available_id = available_id + selected;
    id.forEach(id => {
      let option = '<option value="' + id + '">' + id + '</option>';
      available_id = available_id + option;
    })
    available_id = available_id + '</select>';

    if(sessionStorage.getItem("role") === "admin") {
    const { value: formValues } = await Swal.fire({
      title: 'Edit operator',
      html: '<br/><input type="text" class="form-control" id="fullname" value="' + nameList[0].fullname + '"><br/>' + '<input type="text" class="form-control" id="username" value="' + nameList[0].username + '"><br/>' + '<input type="password" class="form-control" id="password" placeholder="' + nameList[0].password + '"><br/>' + '<input type="age" class="form-control" id="age" value="' + nameList[0].age + '"><br/>' + '<select class="form-control" id="gender">' + '<option selected value="" disabled>"' + nameList[0].gender + '"</option>' + '<option value="Male">Male</option>' + '<option value="Female">Female</option></select><br/>' + '<select class="form-control" id="race">' + '<option selected value="" disabled>"' + nameList[0].race + '"</option>' + '<option value="Melayu">Melayu</option>' + '<option value="Cina">Cina</option>' + '<option value="Penan">Penan</option>' + '<option value="Iban">Iban/Sea Dayak</option>' + '<option value="Bumiputra">Bumiputra Sarawak</option></select><br/>' + `
      <select name="region_id" id="region_id" class="form-control">
        <option value="">-- SELECT REGION --</option>
        {{#each regions}}
            <option ${"{{id}}" == nameList[0].region_id ? 'selected' : ''} value="{{id}}">{{name}}</option>
          {{/each}}
      </select> <br/>` + '<input type="text" class="form-control" id="laptopId" value="' + nameList[0].laptop_id + '"><br/>' + '<input type="text" class="form-control" id="role" value="operator" readonly>',
      focusConfirm: false,
      preConfirm: () => {
        return [
            document.getElementById('fullname').value,
            document.getElementById('username').value,
            document.getElementById('race').value,
            document.getElementById('age').value,
            document.getElementById('role').value,
            document.getElementById('laptopId').value,
            document.getElementById('gender').value,
            document.getElementById('password').value,
            document.getElementById('region_id').value
        ]
      }
    })} else {
          const { value: formValues } = await Swal.fire({
      title: 'Add new operator',
      html: `
        <br/>
        <input type="text" class="form-control" id="fullname" value="${nameList[0].fullname}" readonly>
        <br/>
        <input type="text" class="form-control" id="username" value="${nameList[0].username}" readonly>
        <br/>
        <input type="password" class="form-control" id="password" placeholder="${nameList[0].password}"readonly>
        <br/>
        <input type="age" class="form-control" id="age" value="${nameList[0].age}"readonly>
        <br/>
        <select class="form-control" id="gender">
          <option selected value="" disabled>"${nameList[0].gender}"</option>
          </select>
        <br/>
        <select class="form-control" id="race">
          <option selected value="" disabled>"${nameList[0].race}"</option>
        </select>
        <br/>
        <select name="region_id" id="region_id" class="form-control">
          <option value="">-- SELECT REGION --</option>
          {{#each regions}}
            <option ${"{{id}}" == nameList[0].region_id ? 'selected' : ''} value="{{id}}">{{name}}</option>
          {{/each}}
        </select>
        <input type="text" class="form-control" id="laptopId" value="${nameList[0].laptop_id}">
        <br/>
        <input type="text" class="form-control" id="role" value="operator" readonly>`,
      focusConfirm: false,
      preConfirm: () => {
        return [
            document.getElementById('fullname').value,
            document.getElementById('username').value,
            document.getElementById('race').value,
            document.getElementById('age').value,
            document.getElementById('role').value,
            document.getElementById('laptopId').value,
            document.getElementById('gender').value,
            document.getElementById('password').value,
            document.getElementById('region_id').value
        ]
      }
    })
    }
    if (formValues) {
      try {

        var formData = JSON.stringify({
            fullname: formValues[0],
            username: formValues[1],
            race: formValues[2],
            age: formValues[3],
            role: formValues[4],
            laptop_id: formValues[5],
            gender: formValues[6],
            password: formValues[7],
            region_id: formValues[8]
        });

        const accountCreate = await fetch(`${url}profile/${username}/edit`, {
          method: "post",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            Authorization: `bearer ${sessionStorage.getItem("token")}`
          },
          body: formData
        });
        if (accountCreate){
          const created = await accountCreate.json();

          if (created.editstatus) {
            Swal.fire({
              title: "Congratulation",
              text: "Successfully Created",
              type: "success"
            }).then(result => {
              if (result.value) {
                window.location.reload();
              }
            });
          } else {
            Swal.fire({
              title: "Fail",
              text: "Please refill the form",
              type: "error"
            });
          }
        }
      } catch (err) {
        console.log(err)
        Swal.fire("Something went wrong", err.message, "error");
      }
    }
  }

  async function del(username) {
    try {

        const req = await swal.fire({
                                title: "Are you sure?",
                                type: "warning",
                                showCancelButton: true,
                                confirmButtonColor: "#DD6B55",
                                confirmButtonText: "Yes, delete it!",
                                cancelButtonText: "No, cancel please!"
                        })

        const status = await req;

        if(status.value) {
                const res = await fetch(`${url}profile/${username}/delete`, {
                        method: "get",
                        headers: {
                                Accept: "application/json",
                                "Content-type": "application/json",
                                Authorization: `bearer ${sessionStorage.getItem("token")}`
                        }

                });
                
                const deleted = await res;
                swal.fire("Successfully deleted", "success")
                .then(result => {
                        if (result.value) {
                                window.location.reload();
                        }
        }); 
        }
    } catch (err) {
      console.log(err);
    }
  }
</script>