<div class="block-header">
  <div class="row">
    <div class="col-lg-5 col-md-8 col-sm-12">
      <h2>Supervisor</h2>
    </div>
    <div class="col-lg-7 col-md-4 col-sm-12 text-right">
      <ul class="breadcrumb justify-content-end">
        <li class="breadcrumb-item"><a href="index.html"><i class="icon-home"></i></a></li>
        <li class="breadcrumb-item">Tetapan</li>
        <li class="breadcrumb-item active">Supervisor</li>
      </ul>
    </div>
  </div>
</div>

<div class="row clearfix">
  <div class="col-lg-12">
    <div class="card">
      <div class="header">
        <h2>Senarai Supervisor</h2>
      </div>
      <div class="body">
        <button id="addToTable" class="btn btn-primary m-b-15" type="button">
          <i class="icon wb-plus" aria-hidden="true"></i> Tambah Supervisor
        </button>
        <div class="table-responsive">
          <table class="table table-bordered table-hover table-striped datatable" id="addrowExample">
            <thead>
              <tr>
                <th>Full Name</th>
                <th>Username</th>
                <th>Age</th>
                <th>Gender</th>
                <th>Race</th>
                <th>Laptop ID</th>
                <th>Region</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>

              {{#each oper}}
                <tr class="gradeA">
                  <td>{{fullname}}</td>
                  <td>{{username}}</td>
                  <td>{{age}}</td>
                  <td>{{gender}}</td>
                  <td>{{race}}</td>
                  <td>{{laptop_id}}</td>
                  <td>{{region}}</td>
                  <td class="actions">
                    <button class="btn btn-sm btn-icon btn-pure btn-default on-default m-r-5 button-edit"
                      data-toggle="tooltip" data-original-title="Edit" onclick="edit('{{{username}}}')"><i
                        class="icon-pencil" aria-hidden="true"></i></button>
                    <button class="btn btn-sm btn-icon btn-pure btn-default on-default button-remove"
                      data-toggle="tooltip" data-original-title="Remove" onclick="del('{{{username}}}')"><i
                        class="icon-trash" aria-hidden="true"></i></button>
                    <button title="change password" data-toggle="modal" data-username="{{username}}" data-target="#changePasswordModal" class="btn ml-1 btn-icon btn-pure btn-default passwordModalButton">
                      <i class="fa fa-key"></i>
                    </button>
                  </td>
                </tr>
              {{/each}}
            </tbody>
            <tfoot>
              <tr>
                <th>Full Name</th>
                <th>Username</th>
                <th>Age</th>
                <th>Gender</th>
                <th>Race</th>
                <th>Laptop ID</th>
                <th>Region</th>
                <th>Actions</th>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="modal fade" id="changePasswordModal" tabindex="-1" role="dialog" aria-labelledby="changePasswordLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="changePasswordLabel">Change Password</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="changePasswordForm">
        <div class="modal-body">
          <div class="row">
            <div class="col-md-12">
              <div class="form-input">
                <label for="password1" class="col-form-label">Password</label>
                <input type="password" id="password1" class="form-control">
              </div>
              <div class="form-input">
                <label for="password2" class="col-form-label">Repeat-password</label>
                <input type="password" id="password2" class="form-control">
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" id="closeChangePassword" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Save changes</button>
        </div>
      </form>
    </div>
  </div>
</div>
<script>

  $(document).ready(() => {
    $("table.datatable").dataTable();
    const passwordForm = $('form#changePasswordForm')
    const passwordButton = $('button.passwordModalButton')

    let currentUser = null

    passwordButton.click(function(e) {
      currentUser = $(this).data('username')
    })
    passwordForm.submit(async function(e) {
      e.preventDefault()
      const password1 = $(this).find('#password1').val().trim()
      const password2 = $(this).find('#password2').val().trim()
      const username = currentUser.trim()
      if (!password1 && !password2)
        return Swal.fire('Ouupss..', 'Password cannot be blank', 'error')

      if (password1.length < 5) 
        return Swal.fire('Ouupss..', 'Password cannot be less than 5', 'error')
        
      if (password1 !== password2)
        return Swal.fire('Ouupss..', 'Password not match', 'error')
      
      const changeRes = await fetch(`{{url}}profile/${username}/change_password`, {
        method: 'put',
        headers: {
          'Authorization': `bearer ${sessionStorage.getItem('token')}`,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          password1,
          password2
        })
      })

      if (changeRes.status === 401)
        return Swal.fire('Ouupss..', 'Not Authorized', 'error')
          .then(() => window.location.href = 'js/pages/page-login.html')
        

      const res = await changeRes.json()

      if (res.status)
        return Swal.fire('Successful', 'Password has been changed', 'success')
        .then(() => passwordForm.find('button#closeChangePassword').click())
    })
  })

  async function add() {
    try {
      const { value } = await Swal.fire({
        title: 'Add new supervisor',
        html: '<br/><input type="text" class="form-control" id="fullname" placeholder="Enter full name"><br/>' + '<input type="text" class="form-control" id="username" placeholder="Enter username"><br/>' + '<input type="password" class="form-control" id="password" placeholder="Enter password"><br/>' + '<input type="age" class="form-control" id="age" placeholder="Enter age"><br/>' + '<select class="form-control" id="gender">' + '<option selected value="" disabled>Select gender</option>' + '<option value="Male">Male</option>' + '<option value="Female">Female</option></select><br/>' + '<select class="form-control" id="race">' + '<option selected value="" disabled>Select race</option>' + '<option value="Melayu">Melayu</option>' + '<option value="Cina">Cina</option>' + '<option value="Penan">Penan</option>' + '<option value="Iban">Iban/Sea Dayak</option>' + '<option value="Bumiputra">Bumiputra Sarawak</option></select><br/>' + '<input type="text" class="form-control" id="region" placeholder="Enter region"><br/>' + '<input type="text" class="form-control" id="laptopId" placeholder="Enter laptop ID"><br/>' + '<input type="text" class="form-control" id="role" value="supervisor" readonly>',
        focusConfirm: false,
        preConfirm: () => {
          return [
            document.getElementById('fullname').value,
            document.getElementById('username').value,
            document.getElementById('race').value,
            document.getElementById('age').value,
            document.getElementById('role').value,
            document.getElementById('laptopId').value,
            document.getElementById('gender').value,
            document.getElementById('password').value,
            document.getElementById('region').value
          ]
        }
      })

      if (value) {
        try {
          var formData = JSON.stringify({
            fullname: value[0],
            username: value[1],
            race: value[2],
            age: value[3],
            role: value[4],
            laptop_id: value[5],
            gender: value[6],
            password: value[7],
            region: value[8]
          });
          const accountCreate = await fetch(`${{{url}}}registration`, {
            method: "post",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json"
            },
            body: formData
          });

          const created = await accountCreate.json();


          if (created.insertstatus) {
            Swal.fire({
              title: "Congratulation",
              text: "Successfully Created",
              type: "success"
            }).then(result => {
              if (result.value) {
                window.location.reload();
              }
            });
          } else {
            Swal.fire({
              title: "Fail",
              text: "Please refill the registration form",
              type: "error"
            });
          }
        } catch (err) {
          Swal.fire("Something went wrong", err.message, "error");
        }
      }
    } catch (err) {
      console.log(err);
    }

  }


  async function edit(username) {
    var oper = {{{ json oper }}};
  const nameList = oper.filter(profiles => username === profiles.username);

  const { value: formValues } = await Swal.fire({
    title: 'Edit supervisor',
    html: '<br/><input type="text" class="form-control" id="fullname" value="' + nameList[0].fullname + '"><br/>' + '<input type="text" class="form-control" id="username" value="' + nameList[0].username + '"><br/>' + '<input type="password" class="form-control" id="password" placeholder="' + nameList[0].password + '"><br/>' + '<input type="age" class="form-control" id="age" value="' + nameList[0].age + '"><br/>' + '<select class="form-control" id="gender">' + '<option selected value="" disabled>"' + nameList[0].gender + '"</option>' + '<option value="Male">Male</option>' + '<option value="Female">Female</option></select><br/>' + '<select class="form-control" id="race">' + '<option selected value="" disabled>"' + nameList[0].race + '"</option>' + '<option value="Melayu">Melayu</option>' + '<option value="Cina">Cina</option>' + '<option value="Penan">Penan</option>' + '<option value="Iban">Iban/Sea Dayak</option>' + '<option value="Bumiputra">Bumiputra Sarawak</option></select><br/>' + '<input type="text" class="form-control" id="region" value="' + nameList[0].region + '"><br/>' + '<input type="text" class="form-control" id="laptopId" value="' + nameList[0].laptop_id + '"><br/>' + '<input type="text" class="form-control" id="role" value="supervisor" readonly>',
    focusConfirm: false,
    preConfirm: () => {
      return [
        document.getElementById('fullname').value,
        document.getElementById('username').value,
        document.getElementById('race').value,
        document.getElementById('age').value,
        document.getElementById('role').value,
        document.getElementById('laptopId').value,
        document.getElementById('gender').value,
        document.getElementById('password').value,
        document.getElementById('region').value
      ]
    }
  })

  if (formValues) {
    try {

      var formData = JSON.stringify({
        fullname: formValues[0],
        username: formValues[1],
        race: formValues[2],
        age: formValues[3],
        role: formValues[4],
        laptop_id: formValues[5],
        gender: formValues[6],
        password: formValues[7],
        region: formValues[8]
      });

      const accountCreate = await fetch(`${{{url}}}profile/${username}/edit`, {
        method: "post",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          Authorization: `bearer ${sessionStorage.getItem("token")}`
        },
        body: formData
      });
      if (accountCreate) {
        const created = await accountCreate.json();

        if (created.editstatus) {
          Swal.fire({
            title: "Congratulation",
            text: "Successfully Created",
            type: "success"
          }).then(result => {
            if (result.value) {
              window.location.reload();
            }
          });
        } else {
          Swal.fire({
            title: "Fail",
            text: "Please refill the form",
            type: "error"
          });
        }
      }
    } catch (err) {
      console.log(err)
      Swal.fire("Something went wrong", err.message, "error");
    }
  }
  }

  async function del(username) {
    try {

      const req = await swal.fire({
        title: "Are you sure?",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, delete it!",
        cancelButtonText: "No, cancel please!"
      })

      const status = await req;

      if (status.value) {
        const res = await fetch(`${{{url}}}profile/${username}/delete`, {
          method: "get",
          headers: {
            Accept: "application/json",
            "Content-type": "application/json",
            Authorization: `bearer ${sessionStorage.getItem("token")}`
          }

        });

        const deleted = await res;
        swal.fire("Successfully deleted", "success")
          .then(result => {
            if (result.value) {
              window.location.reload();
            }
          });
      }
    } catch (err) {
      console.log(err);
    }
  }

</script>
