<style>
  td, select#race { text-transform: lowercase; }
  td:first-letter { text-transform: uppercase; }
  select#race:first-letter { text-transform: uppercase; }
  #addrowExample_filter { float: right; }
</style>
<div class="block-header">
  <div class="row">
    <div class="col-lg-5 col-md-8 col-sm-12">
      <h2>Admin</h2>
    </div>
    <div class="col-lg-7 col-md-4 col-sm-12 text-right">
      <ul class="breadcrumb justify-content-end">
        <li class="breadcrumb-item"><a href="index.html"><i class="icon-home"></i></a></li>
        <li class="breadcrumb-item">Tetapan</li>
        <li class="breadcrumb-item active">Admin</li>
      </ul>
    </div>
  </div>
</div>

<div class="row clearfix">
  <div class="col-lg-12">
    <div class="card">
      <div class="header">
        <h2>Senarai Admin</h2>
      </div>
      <div class="body">
        <button id="addToTable" onclick="add()" class="btn btn-primary m-b-15" type="button">
          <i class="icon wb-plus" aria-hidden="true"></i> Tambah Admin
        </button>
        <div class="table-responsive">
          <table class="table table-bordered table-hover table-striped datatable" id="addrowExample">
            <thead>
              <tr>
                <th>Full Name</th>
                <th>Username</th>
                <th>Age</th>
                <th>Gender</th>
                <th>Race</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>

              {{#each oper}}
                <tr class="gradeA">
                  <td>{{fullname}}</td>
                  <td>{{username}}</td>
                  <td>{{age}}</td>
                  <td>{{gender}}</td>
                  <td>{{race}}</td>
                  <td class="actions">
                    <button class="btn btn-sm btn-icon btn-pure btn-default on-default m-r-5 button-edit"
                      data-toggle="tooltip" data-original-title="Edit" onclick="edit('{{{username}}}')"><i
                        class="icon-pencil" aria-hidden="true"></i></button>
                    <button class="btn btn-sm btn-icon btn-pure btn-default on-default button-remove"
                      data-toggle="tooltip" data-original-title="Remove" onclick="del('{{{username}}}')"><i
                        class="icon-trash" aria-hidden="true"></i></button>
                  </td>
                </tr>
              {{/each}}
            </tbody>
            <tfoot>
              <tr>
                <th>Full Name</th>
                <th>Username</th>
                <th>Age</th>
                <th>Gender</th>
                <th>Race</th>
                <th>Actions</th>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<script>

    $(document).ready(() => {
    $("table.datatable").dataTable();
  })
  
  async function add() {
    try {
      const { value } = await Swal.fire({
        title: 'Add new admin',
        html: '<br/><input type="text" class="form-control" id="fullname" placeholder="Enter full name"><br/>' + '<input type="text" class="form-control" id="username" placeholder="Enter username"><br/>' + '<input type="password" class="form-control" id="password" placeholder="Enter password"><br/>' + '<input type="age" class="form-control" id="age" placeholder="Enter age"><br/>' + '<select class="form-control" id="gender">' + '<option selected value="" disabled>Select gender</option>' + '<option value="Male">Male</option>' + '<option value="Female">Female</option></select><br/>' + '<select class="form-control" id="race">' + '<option selected value="" disabled>Select race</option>' + '<option value="Melayu">Melayu</option>' + '<option value="Cina">Cina</option>' + '<option value="Penan">Penan</option>' + '<option value="Iban">Iban/Sea Dayak</option>' + '<option value="Bumiputra">Bumiputra Sarawak</option></select><br/>' + '<input type="text" class="form-control" id="role" value="admin" readonly>',
        focusConfirm: false,
        preConfirm: () => {
          return [
            document.getElementById('fullname').value,
            document.getElementById('username').value,
            document.getElementById('race').value,
            document.getElementById('age').value,
            document.getElementById('role').value,
            document.getElementById('gender').value,
            document.getElementById('password').value
          ]
        }
      })

      const val = await value;
      if (val) {
        try {
          var formData = JSON.stringify({
            fullname: val[0],
            username: val[1],
            race: val[2],
            age: val[3],
            role: val[4],
            laptop_id: "LA00",
            gender: val[5],
            password: val[6],
            region_id: 0
          });

          const accountCreate = await fetch(`{{url}}registration`, {
            method: "post",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              'Cache-Control': 'no-cache'
            },
            body: formData
          });

          const created = await accountCreate.json();
          if (created.insertstatus) {
            Swal.fire({
              title: "Congratulation",
              text: "Successfully Created",
              type: "success"
            }).then(result => {
              if (result.value) {
                window.location.reload();
              }
            });
          } else {
            Swal.fire({
              title: "Fail",
              text: "Please refill the registration form",
              type: "error"
            });
          }
        } catch (err) {
          Swal.fire("Something went wrong", err.message, "error");
        }
      }
    } catch (err) {
      console.log(err);
    }
  }


  async function edit(username) {
    var oper = {{{ json oper }}};
  const nameList = oper.filter(profiles => username === profiles.username);

  const { value: formValues } = await Swal.fire({
    title: 'Edit admin',
    html: '<br/><input type="text" class="form-control" id="fullname" value="' + nameList[0].fullname + '"><br/>' + '<input type="text" class="form-control" id="username" value="' + nameList[0].username + '"readonly><br/>' + '<input type="password" class="form-control" id="password" value="' + nameList[0].password + '" readonly><br/>' + '<input type="age" class="form-control" id="age" value="' + nameList[0].age + '"><br/>' + '<select class="form-control" id="gender">' + '<option selected value="' + nameList[0].gender + '" disabled>' + nameList[0].gender + '</option>' + '<option value="Male">Male</option>' + '<option value="Female">Female</option></select><br/>' + '<select class="form-control" id="race">' + '<option selected value="' + nameList[0].race + '" disabled>' + nameList[0].race + '</option>' + '<option value="Melayu">Melayu</option>' + '<option value="Cina">Cina</option>' + '<option value="Penan">Penan</option>' + '<option value="Iban">Iban/Sea Dayak</option>' + '<option value="Bumiputra">Bumiputra Sarawak</option></select><br/>' + '<input type="text" class="form-control" id="laptopId" value="' + nameList[0].laptop_id + '"><br/>' + '<input type="text" class="form-control" id="role" value="admin" readonly>',
    focusConfirm: false,
    preConfirm: () => {
      return [
        document.getElementById('fullname').value,
        document.getElementById('username').value,
        document.getElementById('race').value,
        document.getElementById('age').value,
        document.getElementById('role').value,
        document.getElementById('laptopId').value,
        document.getElementById('gender').value
      ]
    }
  })

  if (formValues) {
    try {

      var formData = JSON.stringify({
        fullname: formValues[0],
        username: formValues[1],
        race: formValues[2],
        age: formValues[3],
        role: formValues[4],
        laptop_id: formValues[5],
        gender: formValues[6],
        region_id: 0,
        set_id: 0
      });
      const accountCreate = await fetch(`{{url}}profile/${username}/edit`, {
        method: "post",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          Authorization: `bearer ${sessionStorage.getItem("token")}`,
          'Cache-Control': 'no-cache'
        },
        body: formData
      });
      
      const created = await accountCreate.json();
        if (created.status) {
          Swal.fire({
            title: "Congratulation",
            text: "Successfully Created",
            type: "success"
          }).then(result => {
            if (result.value) {
              window.location.reload();
            }
          });
        } else {
          Swal.fire({
            title: "Fail",
            text: "Please refill the form",
            type: "error"
          });
        }
    } catch (err) {
      console.log(err)
      Swal.fire("Something went wrong", err.message, "error");
    }
  }
  }

  async function del(username) {
    try {

      const req = await swal.fire({
        title: "Are you sure?",
        type: "warning",
        showCancelButton: true,
        confirmButtonColor: "#DD6B55",
        confirmButtonText: "Yes, delete it!",
        cancelButtonText: "No, cancel please!"
      })

      const status = await req;

      if (status.value) {
        const res = await fetch(`{{url}}profile/${username}/delete`, {
          method: "get",
          headers: {
            Accept: "application/json",
            "Content-type": "application/json",
            Authorization: `bearer ${sessionStorage.getItem("token")}`,
            'Cache-Control': 'no-cache'
          }

        });

        const deleted = await res;
        if(deleted.status) {
        swal.fire("Admin","Successfully deleted", "success")
          .then(result => {
            if (result.value) {
              window.location.reload();
            }
          });
        }
        }
    } catch (err) {
      console.log(err);
    }
  }

</script>
